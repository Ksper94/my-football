import { createClient } from '@supabase/supabase-js';
import sgMail from '@sendgrid/mail';

// Configuration Supabase et SendGrid
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©thode non autoris√©e. Utilisez POST.' });
  }

  try {
    // R√©cup√©rer les utilisateurs inscrits il y a 7 jours ou plus
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();

    const { data: users, error: userError } = await supabase
      .from('auth.users')
      .select('id, email, created_at')
      .lt('created_at', sevenDaysAgo); // Inscrits avant il y a 7 jours

    if (userError) {
      console.error('Erreur lors de la r√©cup√©ration des utilisateurs :', userError);
      return res.status(500).json({ error: 'Erreur interne du serveur.' });
    }

    // V√©rifier que ces utilisateurs ne sont pas dans la table `subscriptions` et n'ont pas re√ßu d'email
    const eligibleUsers = [];
    for (const user of users) {
      const { data: subscriptions, error: subError } = await supabase
        .from('subscriptions')
        .select('id')
        .eq('user_id', user.id);

      const { data: metadata, error: metadataError } = await supabase
        .from('user_metadata')
        .select('last_email_sent')
        .eq('id', user.id)
        .single();

      if (subError || metadataError) {
        console.error(`Erreur pour l'utilisateur ${user.id}:`, subError || metadataError);
        continue;
      }

      // Si pas d'abonnement et aucun email envoy√©, l'utilisateur est √©ligible
      if (subscriptions.length === 0 && (!metadata || !metadata.last_email_sent)) {
        eligibleUsers.push(user);
      }
    }

    // Envoi des emails et mise √† jour de `last_email_sent`
    for (const user of eligibleUsers) {
      try {
        await sgMail.send({
          to: user.email,
          from: 'support@foot-predictions.com',
          subject: 'Votre p√©riode d‚Äôessai est termin√©e‚ÄØ!',
          html: `
            <p>Bonjour,</p>

            <p>Votre p√©riode d‚Äôessai gratuite de 7 jours est maintenant termin√©e.</p>

            <p>
              Ne laissez pas vos paris devenir un jeu de hasard‚ÄØ! Avec <strong>Foot Predictions</strong>, 
              acc√©dez √† des pronostics bas√©s sur des analyses ultra-pr√©cises 
              gr√¢ce √† notre puissant algorithme.
            </p>

            <p>
              Voici pourquoi des milliers de parieurs nous font d√©j√† confiance‚ÄØ:
            </p>
            <ul>
              <li>üí° <strong>Pr√©dictions 100% bas√©es sur des donn√©es scientifiques</strong> : Analyse de la forme des √©quipes, historique des matchs, m√©t√©o, et bien plus‚ÄØ!</li>
              <li>‚ö° <strong>Boostez vos gains</strong> : Fini les paris au hasard, placez vos mises avec confiance.</li>
              <li>üîí <strong>Acc√®s exclusif</strong> : B√©n√©ficiez d‚Äôoutils premium et d‚Äôun support d√©di√©.</li>
            </ul>

            <p>
              üéØ <strong>Rejoignez-nous d√®s maintenant</strong> et prenez l‚Äôavantage sur les autres parieurs‚ÄØ!
            </p>

            <p>
              D√©couvrez nos formules d‚Äôabonnement adapt√©es √† tous les budgets et commencez √† maximiser vos profits d√®s aujourd‚Äôhui.
            </p>

            <a href="https://foot-predictions.com/pricing" 
               style="display:inline-block; padding:15px 25px; background-color:#ff5722; color:white; font-weight:bold; text-decoration:none; border-radius:8px; margin-top:20px;">
               Je m‚Äôabonne maintenant
            </a>

            <p>
              Ne manquez pas cette opportunit√©‚ÄØ! Chaque jour sans Foot Predictions, c‚Äôest une opportunit√© de gagner que vous laissez passer.
            </p>

            <p>
              √Ä tr√®s bient√¥t,<br />
              <strong>L‚Äô√©quipe Foot Predictions</strong>
            </p>
          `,
        });

        console.log(`Email envoy√© √† ${user.email}`);

        // Met √† jour `last_email_sent` dans la base de donn√©es
        await supabase
          .from('user_metadata')
          .update({ last_email_sent: new Date().toISOString() })
          .eq('id', user.id);
      } catch (error) {
        console.error(`Erreur lors de l'envoi de l'email √† ${user.email}:`, error);
      }
    }

    return res.status(200).json({
      message: `${eligibleUsers.length} emails envoy√©s aux utilisateurs √©ligibles.`,
    });
  } catch (error) {
    console.error('Erreur g√©n√©rale :', error);
    return res.status(500).json({ error: 'Erreur interne du serveur.' });
  }
}
